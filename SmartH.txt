/*****************************************************************************************************
************************************ Defining Pin Number & Header File *******************************
******************************************************************************************************
*/
#include <HCSR04.h>    //ultra sonic 
#define trigerPin 5   //sonar sensor
#define echoPin 6     //sonar sensor / ultra sonic
#define RainPower 7   //rain detector sensor  use time delay 500
#define RainData 8
#define led 13
#define fan 12




/*****************************************************************************************************
************************************ Defining Variables,Objects **************************************
******************************************************************************************************
*/
UltraSonicDistanceSensor distanceSensor(trigerPin,echoPin);  //object create of Ultra Sonic + difine pin
char data;  //phone -> micro
String sendData="";  //micro -> phone
bool ON=LOW;
bool OFF=HIGH;
bool SmartMode=false;


//Below variables are used for making the music tones....
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0
int tempo = 250; //sound speed
int buzzer = 9;
int melody[] = {

  // Nokia Ringtone   
  NOTE_E5, 8, NOTE_D5, 8, NOTE_FS4, 4, NOTE_GS4, 4, 
  NOTE_CS5, 8, NOTE_B4, 8, NOTE_D4, 4, NOTE_E4, 4, 
  NOTE_B4, 8, NOTE_A4, 8, NOTE_CS4, 4, NOTE_E4, 4,
  NOTE_A4, 2, 
};

int notes = sizeof(melody) / sizeof(melody[0]) / 2;
int wholenote = (60000 * 4) / tempo;
int divider = 0, noteDuration = 0;

/*****************************************************************************************************
*************************************** SetUp Section ************************************************
******************************************************************************************************
*/

void setup() { 
 BOOTsound();
 Serial.begin(9600);// baudrate of serial data transfer.... it can be 115200,9600 etc  
 pinMode(RainData,INPUT);
 pinMode(RainPower, OUTPUT);
 pinMode(led,OUTPUT);
 pinMode(fan,OUTPUT);
 digitalWrite(led,OFF);
 digitalWrite(fan,OFF);
 pinMode(buzzer, OUTPUT);
 digitalWrite(RainPower, LOW);// Initially keep the rain sensor OFF 
}




/*****************************************************************************************************
************************************* LOOP WORK SECTION **********************************************
******************************************************************************************************
*/

void loop() {

  if (is_Weather_Clear()) {  //true 1 ,not raining
  }
  else {
    alert();
  }
 

  if(SmartMode){
    sendData="s";  //AI confrim Smart Mode on
    if(is_Anyone_inside()&&is_Weather_Clear()>0){
     digitalWrite(fan,ON);
     digitalWrite(led,ON);
      }
     else if(is_Anyone_inside()&&is_Weather_Clear()==0){
      digitalWrite(fan,OFF);
      digitalWrite(led,ON);
      } 
     else{
 
      digitalWrite(fan,OFF);
      digitalWrite(led,OFF);
      }
    }
    else{
      sendData="p";   //Smart Mode off confirmation
      }

  
  //blutooth data is available
  if(Serial.available()>0){ 
    data=Serial.read();
      if(data=='a'){
        digitalWrite(led,OFF); ///led off
        } 
      if(data=='b'){
        digitalWrite(led,ON);  ////led on   //b,"ok on"
        }  
      if(data=='c'){
        digitalWrite(fan,OFF); 
        }
      if(data=='d'){
        digitalWrite(fan,ON);
        }
      if(data=='w'){
        SmartMode=true;
        }
       if(data=='y'){
        SmartMode=false;
        }     
      data=' '; ///// reset data after work is done  
    }
 Serial.print(sendData); 
 sendData="";
 delay(500);
}




/*****************************************************************************************************
*********************************  User Defined Function *********************************************
******************************************************************************************************
*/


//Return true if anyone is inside the room
bool is_Anyone_inside(){
   if(distanceSensor.measureDistanceCm()<26){
    return true;
    }
    else{
    return false; 
      }
  
  }

//Alert function play beep beep sound......

void alert(){
  tone(buzzer, 1000); // Send 1KHz sound signal...
  delay(1000);        // ...for 1 sec
  noTone(buzzer);     // Stop sound...
  delay(1000);        // ...for 1sec
  }

//

int is_Weather_Clear() {
  digitalWrite(RainPower, HIGH);  // Turn the sensor ON
  delay(10);              // Allow power to settle
  int val = digitalRead(RainData); // Read the sensor output
  digitalWrite(RainPower, LOW);   // Turn the sensor OFF
  return val;             // Return the value
} 



// 
void BOOTsound(){

  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
    divider = melody[thisNote + 1];
    if (divider > 0) {
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5;
    }
    tone(buzzer, melody[thisNote], noteDuration * 0.9);
    delay(noteDuration);
    noTone(buzzer);
  }
  }